"use strict";function LanguageCtrl($scope,$translate){$scope.switch=function($lang){// Switch to the given language
$translate.use($lang),// Full page reload to apply all languages
// This is necessary because of the one-time bindings used for performance reasons
window.location.reload()}}function TimeTableCtrl($scope,$http,lessonService,$window,$location,dataService,timetableData,ngDialog){// Get the personal schedule from the API
$scope.weeks=lessonService.getTimeTable(timetableData.data),$scope.tableTitle=timetableData.title,// Set the default used weeknumber (without leading zero). In the weekend, use the next week number
$scope.weekNumberUsed=parseInt(moment().day()>5?moment().add(1,"w").format("w"):moment().format("w")),// Set the default used year number
$scope.yearUsed=parseInt(moment().format("YYYY")),$scope.weekNumber=function(){var weekInfo={},currentTime=moment();// Set default weeknumber. In the weekend, use the next week number
// Set default year
// Rotate the number when the year has ended
return weekInfo.current=parseInt(currentTime.day()>5?currentTime.add(1,"w").format("w"):currentTime.format("w")),weekInfo.use=$scope.weekNumberUsed,weekInfo.yearCurrent=parseInt(currentTime.format("YYYY")),weekInfo.yearUse=$scope.yearUsed,53===weekInfo.use&&(weekInfo.use=1,weekInfo.yearUse=parseInt(weekInfo.yearCurrent)+1),0===weekInfo.use&&(weekInfo.use=52,weekInfo.yearUse=parseInt(weekInfo.yearCurrent)),$scope.weekNumberUsed=weekInfo.use,$scope.yearUsed=weekInfo.yearUse,weekInfo},$scope.nextWeek=function(){// Add 1 to the weeknumber in use
$scope.weekNumberUsed++,console.log("Op naar volgende week! "+$scope.weekNumberUsed)},$scope.currentWeek=function(){// Reset to the current week
$scope.weekNumberUsed=$scope.weekNumber().current,console.log("Op naar de huidige week! "+$scope.weekNumberUsed)},$scope.previousWeek=function(){// Subtract 1 from the weeknumber in use
$scope.weekNumberUsed--,console.log("Op naar de vorige week! "+$scope.weekNumberUsed)},// Bind keybindings to the window to enable right and left arrow navigation
angular.element($window).on("keydown",function(e){// Go to the next week on right arrow key
39===e.keyCode&&$scope.$apply(function(){$scope.nextWeek()}),// Go to the previous week on left arrow key
37===e.keyCode&&$scope.$apply(function(){$scope.previousWeek()})}),// Calculate the date of the current day
$scope.currentDayDate=function(dayNumber){return moment($scope.weekNumber().yearUse+"-"+$scope.weekNumber().use+"-"+dayNumber,"YYYY-w-d")},$scope.countLessons=function(day){var totalLessons=0;return day.forEach(function(hour){var hourCount=parseInt(hour.lessons.length);totalLessons+=hourCount}),totalLessons},// Check if the current day is today
$scope.isActiveDay=function(dayNumber){return moment().isSame($scope.currentDayDate(dayNumber),"day")?!0:void 0},// Check if the used week is older then or the same as the current week
$scope.isOldWeek=function(){return $scope.weekNumberUsed<=$scope.weekNumber().current&&$scope.yearUsed===$scope.weekNumber().yearCurrent?!0:!1},dataService.getSuggestions().then(function(payload){// Add the resulting array in the global scope for the autocomplete plugin to use it
$scope.searchAuto=payload.data}),// Fired when a search suggestion is selected
$scope.searchSelected=function(selected){if(void 0!==selected){var title=encode(selected.originalObject.name),category=selected.originalObject.category;// Check which category is selected (room or class) to update the url
console.log("Autocomplete "+category+" "+title),$location.path("/search/"+category+"/"+title)}},$scope.teacherDialog=function(teacherAbr){// When the API data is loaded, open the dialog
dataService.getTeacher(teacherAbr).then(function(payload){var data=payload.data;ngDialog.open({template:"partials/dialog-teacher.html",data:data})})}}// Holidays dialog
function HolidaysCtrl($scope,holidayService){// Load the holiday JSON and insert it in the scope
holidayService.getHolidays().then(function(payload){$scope.holidays=payload})}// Holidays dialog
function RoomsCtrl($scope,roomService){// Load all the rooms with occupied information!
roomService.getFreeRooms().then(function(payload){$scope.rooms=payload})}var APIconfig={rawUrl:"https://apps.fhict.nl/api/v1",callback:"&callback=JSON_CALLBACK",loginUrl:"https://portal.fhict.nl/CookieAuth.dll?GetLogon?reason=0&formdir=6",url:function(url){// Enclose the given _relative_ url with the absolute url + callback.
// TODO: Replace ampersand with questionmark if needed (maybe not necessary?)
return this.rawUrl+url+this.callback}},encode=function(url){return encodeURIComponent(url).replace(/\//g,"%2F")};angular.module("pluffApp",["pluffApp.controllers","pluffApp.services","ngRoute","ngCookies","pascalprecht.translate","angucomplete-alt","ngAnimate","ngDialog"]).factory("httpRequestInterceptor",function($q){return{responseError:function(rejection){// This is temporary. TODO: Redirect only if the user isn't logged in.
// TODO: Redirect back to pluff
// window.location = APIconfig.loginUrl;
// This is temporary. TODO: Redirect only if the user isn't logged in.
// TODO: Redirect back to pluff
// window.location = APIconfig.loginUrl;
return 404===rejection.status?$q.reject(rejection):void(302===rejection.status&&(window.location=APIconfig.loginUrl))}}}).config(function($routeProvider,$locationProvider,$httpProvider){$httpProvider.interceptors.push("httpRequestInterceptor"),$routeProvider.when("/",{templateUrl:"partials/timetable.html",controller:"TimeTableCtrl",resolve:{// Load the timetable JSON before the controller
timetableData:function(dataService){return dataService.getTimeTable("/me").then(function(payload){return payload.data})}}}).when("/search/:category/:query",{templateUrl:"partials/timetable.html",controller:"TimeTableCtrl",resolve:{timetableData:function($route,dataService){var categoryUrl,queryUrl=$route.current.params.query;// Load correct API url
switch($route.current.params.category){case"room":categoryUrl="room";break;case"class":categoryUrl="class";break;case"teacher":categoryUrl="teacher/abbreviation";break;case"subject":categoryUrl="subject";break;case"class":categoryUrl="class";break;default:categoryUrl="query"}return dataService.getTimeTable("/"+categoryUrl+"/"+queryUrl).then(function(payload){return payload.data})}}}),$locationProvider.html5Mode(!0)}).config(function($translateProvider){// Lazyload the language files
$translateProvider.useStaticFilesLoader({prefix:"js/lang/",suffix:".json"}),// Dutch is the most used language in here ofcourse, so that's the default
$translateProvider.preferredLanguage("nl"),// Save the user's choice in a cookie
$translateProvider.useCookieStorage()}),/* Services */
angular.module("pluffApp.services",[]).factory("lessonService",function(){var data={};return data.getTimeTable=function(payload){// Create 52 empty weeks, create within every week 5 days (Mo - Fr) and 14 hours
// TODO: Seperate from the rest
for(var weeks=[],week=0;52>week;week++){weeks[week]=[];for(var day=0;5>day;day++){weeks[week][day]=[];for(var hour=0;14>hour;hour++)weeks[week][day][hour]={number:hour+1,lessons:[]}}}// Filter all subjects in this array
var filterSubjects=["delta"];// Process the timetable data
return payload.forEach(function(lesson){// Iterate over every possible hour and check if there's a lesson in it
for(var start=moment(lesson.start),end=moment(lesson.end),startWeeknumber=start.format("w"),startDaynumber=start.format("d"),hourLength=lesson.hoursMask.toString(2).length,hourNumber=1;hourLength>hourNumber;hourNumber++){// Get the exponent of the hourNumber (current hour) (^2 - 1)
// Equalize the current hour with the mask
var hourExp=Math.pow(2,hourNumber-1);// Check if the current hour (hourNumber) is in the mask
// And if the subject isn't in the filterSubjects array
// Ex.: if a mask is 12, the binary code of it is 1100. This means that the lesson is in the third and fourth hour
if(lesson.hoursMask&hourExp&&!(filterSubjects.indexOf(lesson.subject)>-1)){// Reformat the lesson data to include only what is needed
var lessonData={start:start.format("H:mm"),end:end.format("H:mm"),date:start.format("YYYY-MM-DD"),teacher:lesson.teacherAbbreviation.toLowerCase(),subject:lesson.subject.toLowerCase(),room:lesson.room,classes:lesson.classes};// Select the current hour and push the new lesson to it
// Array keys are zero based, and skipping the first key results in a hell
weeks[startWeeknumber-1][startDaynumber-1][hourNumber-1].lessons.push(lessonData)}}}),weeks},data}).factory("dataService",function($http){return{getTimeTable:function(input){return $http.jsonp(APIconfig.url("/schedule"+input+"?expandTeacher=false&IncludeStartOfWeek=true&daysAhead=90"))},getTeacher:function(teacher){return $http.jsonp(APIconfig.url("/people/abbreviation/"+teacher+"?test"))},getSuggestions:function(){return $http.jsonp(APIconfig.url("/schedule/autocomplete?test"))}}}).factory("holidayService",function($http,$log,$q){return{getHolidays:function(){// Get the json with all the holiday dates in it
var deferred=$q.defer();return $http.get("json/holidays.json").success(function(payload){var data=[],now=moment();payload.forEach(function(holiday){var startDate=moment(holiday.start),endDate=moment(holiday.end),calcDays=startDate.diff(now,"days");// We don't want holidays from the past
calcDays>0&&data.push({name:holiday.name,start:startDate.format("DD-MM-YYYY"),end:endDate.format("DD-MM-YYYY"),days:calcDays})}),deferred.resolve(data)}).error(function(msg,code){deferred.reject(msg),$log.error(msg,code)}),deferred.promise}}}).factory("roomService",function($http,$log,$q){return{getFreeRooms:function(){var deffered=$q.defer();return $http.jsonp(APIconfig.url("/schedule/rooms/occupancy/today?test")).success(function(payload){var data=[],filterRooms=["?","eindhoven"];// Loop through each room
payload.forEach(function(room){var hourData=[];if(!(filterRooms.indexOf(room.room)>-1)){// Loop trough all hours and check if the room is free on that hour
// Return true if the room is occupied
for(var hour=1;15>hour;hour++){var hourExp=Math.pow(2,hour-1);hourData.push(room.mask&hourExp?!0:!1)}data.push({name:room.room,hours:hourData})}}),deffered.resolve(data)}).error(function(msg,code){deffered.reject(msg),$log.error(msg,code)}),deffered.promise}}}),/* Controllers */
angular.module("pluffApp.controllers",[]).controller("LanguageCtrl",LanguageCtrl).controller("TimeTableCtrl",TimeTableCtrl).controller("HolidaysCtrl",HolidaysCtrl).controller("RoomsCtrl",RoomsCtrl);
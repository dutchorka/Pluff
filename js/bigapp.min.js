"use strict";function LanguageCtrl($scope,$translate){$scope.switch=function($lang){// Switch to the given language
$translate.use($lang),// Full page reload to apply all languages
window.location.reload()}}function TimeTableCtrl($scope,$http,hourService,$window,$location,dataService,timetableData,ngDialog){$scope.days=[{number:1,spelled:"MONDAY"},{number:2,spelled:"TUESDAY"},{number:3,spelled:"WEDNESDAY"},{number:4,spelled:"THURSDAY"},{number:5,spelled:"FRIDAY"}],// TODO: start times probably aren't necessary (?)
$scope.hours=[{number:1,start:"08:45"},{number:2,start:"09:35"},{number:3,start:"10:45"},{number:4,start:"11:35"},{number:5,start:"12:25"},{number:6,start:"13:15"},{number:7,start:"14:05"},{number:8,start:"15:15"},{number:9,start:"16:05"},{number:10,start:"16:55"},{number:11,start:"18:00"},{number:12,start:"18:50"},{number:13,start:"20:00"},{number:14,start:"21:40"}],// Get the personal schedule from the API
$scope.tableData=timetableData.data,$scope.tableTitle=timetableData.title,// Set the default used weeknumber (without leading zero). In the weekend, use the next week number
$scope.weekNumberUsed=parseInt(moment().day()>5?moment().add(1,"w").format("w"):moment().format("w")),$scope.weekNumber=function(){var weekInfo={},currentTime=moment();// Set default weeknumber. In the weekend, use the next week number
// Rotate the number when the year has ended
return weekInfo.current=parseInt(currentTime.day()>5?currentTime.add(1,"w").format("w"):currentTime.format("w")),weekInfo.use=$scope.weekNumberUsed,53===weekInfo.use&&(weekInfo.use=1),0===weekInfo.use&&(weekInfo.use=52),$scope.weekNumberUsed=weekInfo.use,weekInfo},$scope.nextWeek=function(){// Add 1 to the weeknumber in use
$scope.weekNumberUsed++,console.log("Op naar volgende week! "+$scope.weekNumberUsed)},$scope.currentWeek=function(){// Reset to the current week
$scope.weekNumberUsed=$scope.weekNumber().current,console.log("Op naar de huidige week! "+$scope.weekNumberUsed)},$scope.previousWeek=function(){// Subtract 1 from the weeknumber in use
$scope.weekNumberUsed--,console.log("Op naar de vorige week! "+$scope.weekNumberUsed)},$scope.getHour=function(dayNumber,hourNumber){return hourService.getHour($scope,dayNumber,hourNumber)},// Bind keybindings to the window to enable right and left arrow navigation
angular.element($window).on("keydown",function(e){// Go to the next week on right arrow key
39===e.keyCode&&$scope.$apply(function(){$scope.nextWeek()}),// Go to the previous week on left arrow key
37===e.keyCode&&$scope.$apply(function(){$scope.previousWeek()})}),// Calculate the date of the current day
$scope.currentDayDate=function(dayNumber){// TODO: Don't hardcode the year!
return moment("2014-"+$scope.weekNumber().use+"-"+dayNumber,"YYYY-w-d")},// Check if the current day is today
$scope.isActiveDay=function(dayNumber){return moment().isSame($scope.currentDayDate(dayNumber),"day")?!0:void 0},// Check if the used week is older then or the same as the current week
$scope.isOldWeek=function(){return $scope.weekNumberUsed<=$scope.weekNumber().current?!0:!1},// Display the start and end time of a lesson
$scope.lessonStartEndTime=function(start,end){var startTime=moment(start),endTime=moment(end);return startTime.format("H:m")+" - "+endTime.format("H:m")},dataService.getSuggestions().then(function(payload){// Add the resulting array in the global scope for the autocomplete plugin to use it
$scope.searchAuto=payload.data}),// Fired when a search suggestion is selected
$scope.searchSelected=function(selected){var title=selected.originalObject.name,category=selected.originalObject.category;// Check which category is selected (room or class) to update the url
console.log("Autocomplete "+category+" "+title),$location.path("/"+category+"/"+title)},$scope.teacherDialog=function(teacherAbr){// When the API data is loaded, open the dialog
dataService.getTeacher(teacherAbr).then(function(payload){var data=payload.data;ngDialog.open({template:"partials/dialog-teacher.html",data:data})})}}// Holidays dialog
function HolidaysCtrl($scope,holidayService){// Load the holiday JSON and insert it in the scope
holidayService.getHolidays().then(function(payload){$scope.holidays=payload})}// Holidays dialog
function RoomsCtrl($scope,roomService){// Load the free rooms!
roomService.getFreeRooms().then(function(payload){$scope.rooms=payload})}var APIconfig={rawUrl:"https://apps.fhict.nl/api/v1",callback:"&callback=JSON_CALLBACK",loginUrl:"https://portal.fhict.nl/CookieAuth.dll?GetLogon?reason=0&formdir=6",url:function(url){// Enclose the given _relative_ url with the absolute url + callback.
// TODO: Replace ampersand with questionmark if needed (maybe not necessary?)
return this.rawUrl+url+this.callback}};angular.module("pluffApp",["pluffApp.controllers","pluffApp.services","ngRoute","ngCookies","pascalprecht.translate","angucomplete-alt","ngAnimate","ngDialog"]).factory("httpRequestInterceptor",function($q){return{responseError:function(rejection){// This is temporary. TODO: Redirect only if the user isn't logged in.
// TODO: Redirect back to pluff
return window.location=APIconfig.loginUrl,404===rejection.status?$q.reject(rejection):void(302===rejection.status&&(window.location=APIconfig.loginUrl))}}}).config(function($routeProvider,$locationProvider,$httpProvider){$httpProvider.interceptors.push("httpRequestInterceptor"),$routeProvider.when("/",{templateUrl:"partials/timetable.html",controller:"TimeTableCtrl",resolve:{// Load the timetable JSON before the controller
timetableData:function(dataService){return dataService.getTimeTable("/me").then(function(payload){return payload.data})}}}).when("/room/:roomQuery",{templateUrl:"partials/timetable.html",controller:"TimeTableCtrl",resolve:{timetableData:function($route,dataService){return dataService.getTimeTable("/room/"+$route.current.params.roomQuery).then(function(payload){return payload.data})}}}).when("/class/:classQuery",{templateUrl:"partials/timetable.html",controller:"TimeTableCtrl",resolve:{timetableData:function($route,dataService){return dataService.getTimeTable("/class/"+$route.current.params.classQuery).then(function(payload){return payload.data})}}}).when("/teacher/:teacherQuery",{templateUrl:"partials/timetable.html",controller:"TimeTableCtrl",resolve:{timetableData:function($route,dataService){return dataService.getTimeTable("/teacher/abbreviation/"+$route.current.params.teacherQuery).then(function(payload){return payload.data})}}}).when("/subject/:subjectQuery",{templateUrl:"partials/timetable.html",controller:"TimeTableCtrl",resolve:{timetableData:function($route,dataService){return dataService.getTimeTable("/subject/"+$route.current.params.subjectQuery).then(function(payload){return payload.data})}}}),$locationProvider.html5Mode(!0)}).config(function($translateProvider){// Lazyload the language files
$translateProvider.useStaticFilesLoader({prefix:"js/lang/",suffix:".json"}),// Dutch is the most used language in here ofcourse, so that's the default
$translateProvider.preferredLanguage("nl"),// Save the user's choice in a cookie
$translateProvider.useCookieStorage()}),/* Services */
angular.module("pluffApp.services",[]).factory("hourService",function(){var hour={};return hour.getHour=function($scope,dayNumber,hourNumber){// dayNumber can be 1 to 5 (day of the week)
// hourNumber can be 1 to 14
// Allow multiple lessons in one hour
var hourCallback=[],filterSubjects=["delta"],currentDay=$scope.currentDayDate(dayNumber),hourExp=Math.pow(2,hourNumber-1);// TODO: Optimize for performance
return $scope.tableData.forEach(function(lesson){// Check if the lesson is on the current day and if the current hour is in the mask
// Ex.: if a mask is 12, the binary code of it is 1100. This means that the lesson is in the third and fourth hour.
currentDay.isSame(lesson.start,"day")&&!(filterSubjects.indexOf(lesson.subject)>-1)&&lesson.hoursMask&hourExp&&hourCallback.push(lesson)}),hourCallback},hour}).factory("dataService",function($http){return{getTimeTable:function(input){// TODO: Only pull the timetables for this week (calculate the difference between selected week and current week)
return $http.jsonp(APIconfig.url("/Schedule"+input+"?includeTeacher=false&IncludeStartOfWeek=true&daysAhead=90"))},getTeacher:function(teacher){return $http.jsonp(APIconfig.url("/people/afkorting/"+teacher+"?test"))},getSuggestions:function(){return $http.jsonp(APIconfig.url("/schedule/autocomplete?test"))}}}).factory("holidayService",function($http,$log,$q){return{getHolidays:function(){// Get the json with all the holiday dates in it
var deferred=$q.defer();return $http.get("json/holidays.json").success(function(payload){var data=[],now=moment();payload.forEach(function(holiday){var startDate=moment(holiday.start),endDate=moment(holiday.end),calcDays=startDate.diff(now,"days");// We don't want holidays from the past
calcDays>0&&data.push({name:holiday.name,start:startDate.format("DD-MM-YYYY"),end:endDate.format("DD-MM-YYYY"),days:calcDays})}),deferred.resolve(data)}).error(function(msg,code){deferred.reject(msg),$log.error(msg,code)}),deferred.promise}}}).factory("roomService",function($http,$log,$q){return{getFreeRooms:function(){var deffered=$q.defer();return $http.jsonp(APIconfig.url("/Schedule/rooms/occupancy/today?test")).success(function(payload){var data=[],filterRooms=["?","eindhoven"];// Loop through each room
payload.forEach(function(room){var hourData=[];if(!(filterRooms.indexOf(room.room)>-1)){// Loop trough all hours and check if the room is free on that hour.
// Return true if the room is occupied.
for(var hour=1;15>hour;hour++){var hourExp=Math.pow(2,hour-1);hourData.push(room.mask&hourExp?!0:!1)}data.push({name:room.room,hours:hourData})}}),deffered.resolve(data)}).error(function(msg,code){deffered.reject(msg),$log.error(msg,code)}),deffered.promise}}}),/* Controllers */
angular.module("pluffApp.controllers",[]).controller("LanguageCtrl",LanguageCtrl).controller("TimeTableCtrl",TimeTableCtrl).controller("HolidaysCtrl",HolidaysCtrl).controller("RoomsCtrl",RoomsCtrl);